generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COORDINADOR
  VOLUNTARIO
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(VOLUNTARIO)
  accounts      Account[]
  sessions      Session[]
  passwordHash  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  client      String?
  description String?
  status      ProjectStatus @default(PLANNED)
  startDate   DateTime?
  endDate     DateTime?
  ownerId     String?       @db.ObjectId
  owner       User?         @relation(fields: [ownerId], references: [id])
  tasks       Task[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Task {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  projectId  String     @db.ObjectId
  project    Project    @relation(fields: [projectId], references: [id])
  title      String
  description String?
  status     TaskStatus @default(TODO)
  priority   Int        @default(3)
  assigneeId String?    @db.ObjectId
  assignee   User?      @relation(fields: [assigneeId], references: [id])
  dueDate    DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}
